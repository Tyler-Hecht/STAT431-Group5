gelman.plot(x, ylim = c(0.9, 1.05))
summary(x)
model.dyes2 = "model {
for(i in 1 : batches) {
mu[i] ~ dnorm(theta, tau.btw)
for(j in 1 : samples) {
y[i , j] ~ dnorm(mu[i], tau.with)
}
}
sigma2.with <- 1 / tau.with
sigma2.btw <- 1 / tau.btw
tau.with ~ dgamma(16, 1/125)
tau.btw ~ dgamma(16, 1/125)
theta ~ dnorm(0.0, 1.0E-10)
}"
cat(model.dyes2, file = {Ex17.3model2 = tempfile()})
dyes = list(batches = 6, samples = 5,
y = structure(
.Data = c(1545, 1440, 1440, 1520, 1580,
1540, 1555, 1490, 1560, 1495,
1595, 1550, 1605, 1510, 1560,
1445, 1440, 1595, 1465, 1545,
1595, 1630, 1515, 1635, 1625,
1520, 1455, 1450, 1480, 1445), .Dim = c(6, 5)))
d <- list(y=dyes$y, batches = dyes$batches, samples = dyes$samples)
inits <- list(
list(theta=1500, tau.with=1, tau.btw=1),
list(mu = c(1525, 1525, 1525, 1525, 1525, 1525), theta = 1525, tau.btw = 10000, tau.with = 0.001),
list(mu = c(5525, 4525, 3525, 2525, 1525, 525), theta = 1000, tau.btw = 0.001, tau.with = 10000))
m <- jags.model(Ex17.3model2, d, inits, n.chains=3, n.adapt=0)
x = coda.samples(m, c("theta", "mu", "tau.btw", "tau.with", "sigma2.btw", "sigma2.with"), n.iter=5000)
save(x, file = "dyes3.file")
load("dyes3.file")
traceplot(x)
gelman.plot(x, ylim = c(0.9, 1.05))
summary(x)
?dgamma
model.dyes2 = "model {
for(i in 1 : batches) {
mu[i] ~ dnorm(theta, tau.btw)
for(j in 1 : samples) {
y[i , j] ~ dnorm(mu[i], tau.with)
}
}
sigma2.with <- 1 / tau.with
sigma2.btw <- 1 / tau.btw
tau.with ~ dgamma(16, 125)
tau.btw ~ dgamma(16, 125)
theta ~ dnorm(0.0, 1.0E-10)
}"
cat(model.dyes2, file = {Ex17.3model2 = tempfile()})
dyes = list(batches = 6, samples = 5,
y = structure(
.Data = c(1545, 1440, 1440, 1520, 1580,
1540, 1555, 1490, 1560, 1495,
1595, 1550, 1605, 1510, 1560,
1445, 1440, 1595, 1465, 1545,
1595, 1630, 1515, 1635, 1625,
1520, 1455, 1450, 1480, 1445), .Dim = c(6, 5)))
d <- list(y=dyes$y, batches = dyes$batches, samples = dyes$samples)
inits <- list(
list(theta=1500, tau.with=1, tau.btw=1),
list(mu = c(1525, 1525, 1525, 1525, 1525, 1525), theta = 1525, tau.btw = 10000, tau.with = 0.001),
list(mu = c(5525, 4525, 3525, 2525, 1525, 525), theta = 1000, tau.btw = 0.001, tau.with = 10000))
m <- jags.model(Ex17.3model2, d, inits, n.chains=3, n.adapt=0)
x = coda.samples(m, c("theta", "mu", "tau.btw", "tau.with", "sigma2.btw", "sigma2.with"), n.iter=5000)
save(x, file = "dyes3.file")
load("dyes3.file")
traceplot(x)
gelman.plot(x, ylim = c(0.9, 1.05))
summary(x)
model.dyes2 = "model {
for(i in 1 : batches) {
mu[i] ~ dnorm(theta, tau.btw)
for(j in 1 : samples) {
y[i , j] ~ dnorm(mu[i], tau.with)
}
}
sigma2.with <- 1 / tau.with
sigma2.btw <- 1 / tau.btw
tau.with ~ dgamma(1/16, 1/125)
tau.btw ~ dgamma(1/16, 1/125)
theta ~ dnorm(0.0, 1.0E-10)
}"
cat(model.dyes2, file = {Ex17.3model2 = tempfile()})
dyes = list(batches = 6, samples = 5,
y = structure(
.Data = c(1545, 1440, 1440, 1520, 1580,
1540, 1555, 1490, 1560, 1495,
1595, 1550, 1605, 1510, 1560,
1445, 1440, 1595, 1465, 1545,
1595, 1630, 1515, 1635, 1625,
1520, 1455, 1450, 1480, 1445), .Dim = c(6, 5)))
d <- list(y=dyes$y, batches = dyes$batches, samples = dyes$samples)
inits <- list(
list(theta=1500, tau.with=1, tau.btw=1),
list(mu = c(1525, 1525, 1525, 1525, 1525, 1525), theta = 1525, tau.btw = 10000, tau.with = 0.001),
list(mu = c(5525, 4525, 3525, 2525, 1525, 525), theta = 1000, tau.btw = 0.001, tau.with = 10000))
m <- jags.model(Ex17.3model2, d, inits, n.chains=3, n.adapt=0)
x = coda.samples(m, c("theta", "mu", "tau.btw", "tau.with", "sigma2.btw", "sigma2.with"), n.iter=5000)
save(x, file = "dyes3.file")
load("dyes3.file")
traceplot(x)
gelman.plot(x, ylim = c(0.9, 1.05))
summary(x)
model.dyes2 = "model {
for(i in 1 : batches) {
mu[i] ~ dnorm(theta, tau.btw)
for(j in 1 : samples) {
y[i , j] ~ dnorm(mu[i], tau.with)
}
}
sigma2.with <- 1 / tau.with
sigma2.btw <- 1 / tau.btw
tau.with ~ dgamma(1/16, 125)
tau.btw ~ dgamma(1/16, 125)
theta ~ dnorm(0.0, 1.0E-10)
}"
cat(model.dyes2, file = {Ex17.3model2 = tempfile()})
dyes = list(batches = 6, samples = 5,
y = structure(
.Data = c(1545, 1440, 1440, 1520, 1580,
1540, 1555, 1490, 1560, 1495,
1595, 1550, 1605, 1510, 1560,
1445, 1440, 1595, 1465, 1545,
1595, 1630, 1515, 1635, 1625,
1520, 1455, 1450, 1480, 1445), .Dim = c(6, 5)))
d <- list(y=dyes$y, batches = dyes$batches, samples = dyes$samples)
inits <- list(
list(theta=1500, tau.with=1, tau.btw=1),
list(mu = c(1525, 1525, 1525, 1525, 1525, 1525), theta = 1525, tau.btw = 10000, tau.with = 0.001),
list(mu = c(5525, 4525, 3525, 2525, 1525, 525), theta = 1000, tau.btw = 0.001, tau.with = 10000))
m <- jags.model(Ex17.3model2, d, inits, n.chains=3, n.adapt=0)
x = coda.samples(m, c("theta", "mu", "tau.btw", "tau.with", "sigma2.btw", "sigma2.with"), n.iter=5000)
save(x, file = "dyes3.file")
load("dyes3.file")
traceplot(x)
gelman.plot(x, ylim = c(0.9, 1.05))
summary(x)
library(rjags)
setwd("C:/Users/tyler/Documents/Courses/23S/STAT 431/Project/STAT431-Group5")
df = read.csv("incar_data.csv")
df$Sentencing.County = as.numeric(as.factor(df$Sentencing.County))
df$Race = as.numeric(as.factor(df$Race))
View(df)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[county])
log(pre_lambda[county]) <- lambda[county]
lambda[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}
model.text = "model {
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[county])
log(pre_lambda[county]) <- lambda[county]
lambda[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model, file = {example_rjags_model = tempfile()})
cat(model.text, file = {example_rjags_model = tempfile()})
cat(model.text, file = {example.rjags.model = tempfile()})
dim(df)
length(df)
size(df)
nrow(df)
d <- list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[county])
log(pre_lambda[county[i]]) <- lambda[county[i]]
for (c in 1:C)
lambda[county ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[county])
log(pre_lambda[county[i]]) <- lambda[county[i]]
for (c in 1:C) {
lambda[county ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[county])
log(pre_lambda[county[i]]) <- lambda[county[i]]
for (c in 1:C) {
lambda[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[county])
log(pre_lambda[county[i]]) <- lambda[county[i]]
}
for (c in 1:C) {
lambda[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[county])
log(pre_lambda[county[i]]) <- lambda[county[i]]
}
lambda[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[county])
log(pre_lambda[county[i]]) <- lambda[county[i]]
}
lambda[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[i])
log(pre_lambda[i]) <- lambda[i]
lambda[i] <- b0[county[i]]
for (c in 1:C) {
b0[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[i])
log(pre_lambda[i]) <- lambda[i]
lambda[i] <- b0[county[i]]
}
for (c in 1:C) {
b0[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[i])
log(pre_lambda[i]) <- lambda[i]
lambda[i] <- b0[county[i]]
}
b0[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df))
model = jags.model(example.rjags.model, d, n.chains=3)
unique(df$Sentencing.County)
length(unique(df$Sentencing.County))
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df), C = length(unique(df$Sentencing.County)))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[i])
log(pre_lambda[i]) <- lambda[i]
lambda[i] <- b0[county[i]]
}
for (county in 1:C) {
b0[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df), C = length(unique(df$Sentencing.County)))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[i])
log(pre_lambda[i]) <- lambda[i]
lambda[i] <- b0[county[i]]
}
for (county in 1:C) {
b0[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma <- 1 / sqrt(tausq_bar)
}
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df), C = length(unique(df$Sentencing.County)))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[i])
log(pre_lambda[i]) <- lambda[i]
lambda[i] <- b0[county[i]]
}
for (county in 1:C) {
b0[county] ~ dnorm(mu_bar, tausq_bar)
mu_bar ~ dgamma(10, 1)
}
tausq_bar ~ dexp(10)
sigma_bar <- 1 / sqrt(tausq_bar)
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df), C = length(unique(df$Sentencing.County)))
model = jags.model(example.rjags.model, d, n.chains=3)
model.text = "model {
for (i in 1:N) {
time[i] ~ dpois(pre_lambda[i])
log(pre_lambda[i]) <- lambda[i]
lambda[i] <- b0[county[i]]
}
for (county in 1:C) {
b0[county] ~ dnorm(mu_bar, tausq_bar)
}
mu_bar ~ dgamma(10, 1)
tausq_bar ~ dexp(10)
sigma_bar <- 1 / sqrt(tausq_bar)
}"
cat(model.text, file = {example.rjags.model = tempfile()})
d = list(time = df$Sentence.Time, county = df$Sentencing.County, N = nrow(df), C = length(unique(df$Sentencing.County)))
model = jags.model(example.rjags.model, d, n.chains=3)
View(df)
df[834]
df[,834]
df[834,]
View(df)
df[833:835,]
d = list(time = round(df$Sentence.Time), county = df$Sentencing.County, N = nrow(df), C = length(unique(df$Sentencing.County)))
model = jags.model(example.rjags.model, d, n.chains=3)
coda.samples(m, c("mu_bar", "sigma_bar", n.iter=5000)
coda.samples(m, c("mu_bar", "sigma_bar", n.iter=5000))
coda.samples(model, c("mu_bar", "sigma_bar", n.iter=5000))
coda.samples(model, c("mu_bar", "sigma_bar"), n.iter=5000))
coda.samples(model, c("mu_bar", "sigma_bar"), n.iter=5000)
x = coda.samples(model, c("mu_bar", "sigma_bar"), n.iter=5000)
traceplot(x)
traceplot(x)
?traceplot
gelman.plot(x)
summary(windows(x, 500, 5000))
summary(windows(x, 6500, 10000))
summary(window(x, 6500, 10000))
summary(window(x, 500, 5000))
e^2.3712
exp(2.3712)
x
x[,1]
x[,,1]
x[,1,]
x[1:3,1,]
x[1:3,,]
x[,,1:3]
x[1:4,,1:3]
x[1:4,1,1:3]
x[,1,1:3]
mus = exp(x[,1,1:3])
mus = apply(x[,1,1:3], 2, exp)
mus = apply(x[,1,1:3], 3, exp)
mus = apply(x[,1,1:3], 1, exp)
mus = exp(x[,1,1:3])
mus = x[,1,1:3]
View(mus)
View(mus)
as.list(mus)
mus = x[,1,1]+x[,1,2]+x[,1,3]
x[,1,1]
x[1,1,1]
x[1,1,1:3]
x[,1,1:3]
x[1,1,1:3]
x[1:4,1,1:3]
x[1,1,1]
x[1:4,1,1]
x[1:4,1,]
x[1:4,1]
x[1:4,1][[1]]
mus = x[,1,1:3][[,]]
x[1:4,1][[,]]
x[1:4,1][[1:3]]
x[1:4,1][[1]]
x[1:4,1][[1:3]]
x[,1][[1]]
x[,1][[1]]+x[,1][[2]]+x[,1][[3]]
mus = x[,1][[1]]+x[,1][[2]]+x[,1][[3]]
mus
mus = x[,1]
x[,1]
mus = x[,1][[1]]+x[,1][[2]]+x[,1][[3]]
mus = c(x[,1][[1]],x[,1][[2]],x[,1][[3]])
exp(mus)
mean(mus)
mus = exp(mus)
mean(mus)
setwd("C:/Users/tyler/Documents/Courses/23S/STAT 431/Project/STAT431-Group5")
df = read.csv("incar_data.csv")
df$Sentencing.County = as.numeric(as.factor(df$Sentencing.County))
# create model
dat = list(time = df$Sentence.Time, county = df$Sentencing.County)
model = ulam(
alist(
time ~ dpois(pre_lambda),
log(pre_lambda) <- lambda[county],
lambda[county] ~ dgamma2(a_bar, b_bar),
a_bar ~ dgamma2(10, 1),
b_bar ~ dgamma2(0.1, 1)
), data = dat, chains = 4, cores = 4
)
# setup
library(rethinking)
setwd("C:/Users/tyler/Documents/Courses/23S/STAT 431/Project/STAT431-Group5")
df = read.csv("incar_data.csv")
df$Sentencing.County = as.numeric(as.factor(df$Sentencing.County))
# create model
dat = list(time = df$Sentence.Time, county = df$Sentencing.County)
model = ulam(
alist(
time ~ dpois(pre_lambda),
log(pre_lambda) <- lambda[county],
lambda[county] ~ dgamma2(a_bar, b_bar),
a_bar ~ dgamma2(10, 1),
b_bar ~ dgamma2(0.1, 1)
), data = dat, chains = 4, cores = 4
)
precis(model, depth = 2)
post = extract.samples(model)
means = apply(exp(post$lambda), 2, mean)
grand.mean = mean(exp(post$a_bar))
grand.sd = sd(exp(post$a_bar))
sds = apply(exp(post$lambda), 2, sd)
county = unique(df$Sentencing.County)
plot(means ~ county, xlab = "county #", ylab = "lambda", ylim = c(0, 40))
arrows(county, means, county, means + sds, length = 0.02, angle = 90)
arrows(county, means, county, means - sds, length = 0.02, angle = 90)
abline(h = grand.mean, col = "red")
abline(h = grand.mean + grand.sd, col = "orange")
abline(h = grand.mean - grand.sd, col = "orange")
exp(2.73)
# check diagnostics (only the first county is looked at here)
traceplot(model, pars = c("a_bar", "b_bar", "lambda[1]"))
trankplot(model, pars = c("a_bar", "b_bar", "lambda[1]"))
model = ulam(
alist(
time ~ dpois(pre_lambda),
log(pre_lambda) <- lambda[county],
lambda[county] ~ dnorm(a_bar, b_bar),
a_bar ~ dgamma2(10, 1),
b_bar ~ dexp(10)
), data = dat, chains = 4, cores = 4
)
precis(model, depth = 2)
# check diagnostics (only the first county is looked at here)
traceplot(model, pars = c("a_bar", "b_bar", "lambda[1]"))
trankplot(model, pars = c("a_bar", "b_bar", "lambda[1]"))
# sample from posterior
post = extract.samples(model)
means = apply(exp(post$lambda), 2, mean)
grand.mean = mean(exp(post$a_bar))
grand.sd = sd(exp(post$a_bar))
sds = apply(exp(post$lambda), 2, sd)
mus = c(x[,1][[1]],x[,1][[2]],x[,1][[3]])
mean(exp(mus))
